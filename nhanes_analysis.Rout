
R version 4.0.5 Patched (2021-05-28 r80505) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> Sys.time()
[1] "2021-12-03 19:24:47 EST"
> 
> ###############################################################################
> #
> # Project:     Preliminary NHANES analysis for simulation set up
> # Author:      Matt Lee
> # Date:        2021
> # Title:       BST 222 Fall 2021 Group Project
> # Description: Using NHANES data from 2017-18, obtain estimates of 
> #              age, gender, and ethnicity specific BMI curves and quantify
> #              amount of misclassification for each group
> #
> ###############################################################################
> 
> rm(list=ls())
> # setwd("/Volumes/GoogleDrive-101809232694958266345/My Drive/Matt/School/PhD /2021-2022/BST 222/Project/bst222-finalproj/") 
> setwd("/Volumes/GoogleDrive/My Drive/Matt/School/PhD /2021-2022/BST 222/Project/bst222-finalproj/") # imact
> 
> 
> # load packages
> library(haven)
> library(readxl)
> library(survey)
Loading required package: grid
Loading required package: Matrix
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)

Attaching package: ‘tidyr’

The following objects are masked from ‘package:Matrix’:

    expand, pack, unpack

> library(ggplot2)
> library(ggsci)
> 
> 
> # read in data
> demo.raw  <- read_xpt("data/raw-nhanes/DEMO_J.xpt")
> bmx.raw   <- read_xpt("data/raw-nhanes/BMX_J.xpt")
> bpq.raw   <- read_xpt("data/raw-nhanes/BPQ_J.xpt")
> bpx.raw   <- read_xpt("data/raw-nhanes/BPX_J.xpt")
> dexa.raw  <- read_xpt("data/raw-nhanes/DXXAG_J.xpt")
> whq.raw   <- read_xpt("data/raw-nhanes/WHQ_J.xpt")
> 
> 
> # merge data 
> nhanes <- demo.raw %>% 
+     left_join(bmx.raw, by = "SEQN") %>% 
+     left_join(bpq.raw, by = "SEQN") %>% 
+     left_join(bpx.raw, by = "SEQN") %>% 
+     left_join(dexa.raw, by = "SEQN") %>% 
+     left_join(whq.raw, by = "SEQN")
> 
> names(nhanes)
  [1] "SEQN"     "SDDSRVYR" "RIDSTATR" "RIAGENDR" "RIDAGEYR" "RIDAGEMN"
  [7] "RIDRETH1" "RIDRETH3" "RIDEXMON" "RIDEXAGM" "DMQMILIZ" "DMQADFC" 
 [13] "DMDBORN4" "DMDCITZN" "DMDYRSUS" "DMDEDUC3" "DMDEDUC2" "DMDMARTL"
 [19] "RIDEXPRG" "SIALANG"  "SIAPROXY" "SIAINTRP" "FIALANG"  "FIAPROXY"
 [25] "FIAINTRP" "MIALANG"  "MIAPROXY" "MIAINTRP" "AIALANGA" "DMDHHSIZ"
 [31] "DMDFMSIZ" "DMDHHSZA" "DMDHHSZB" "DMDHHSZE" "DMDHRGND" "DMDHRAGZ"
 [37] "DMDHREDZ" "DMDHRMAZ" "DMDHSEDZ" "WTINT2YR" "WTMEC2YR" "SDMVPSU" 
 [43] "SDMVSTRA" "INDHHIN2" "INDFMIN2" "INDFMPIR" "BMDSTATS" "BMXWT"   
 [49] "BMIWT"    "BMXRECUM" "BMIRECUM" "BMXHEAD"  "BMIHEAD"  "BMXHT"   
 [55] "BMIHT"    "BMXBMI"   "BMXLEG"   "BMILEG"   "BMXARML"  "BMIARML" 
 [61] "BMXARMC"  "BMIARMC"  "BMXWAIST" "BMIWAIST" "BMXHIP"   "BMIHIP"  
 [67] "BPQ020"   "BPQ030"   "BPD035"   "BPQ040A"  "BPQ050A"  "BPQ080"  
 [73] "BPQ060"   "BPQ070"   "BPQ090D"  "BPQ100D"  "PEASCCT1" "BPXCHR"  
 [79] "BPAARM"   "BPACSZ"   "BPXPLS"   "BPXPULS"  "BPXPTY"   "BPXML1"  
 [85] "BPXSY1"   "BPXDI1"   "BPAEN1"   "BPXSY2"   "BPXDI2"   "BPAEN2"  
 [91] "BPXSY3"   "BPXDI3"   "BPAEN3"   "BPXSY4"   "BPXDI4"   "BPAEN4"  
 [97] "DXXAGST"  "DXXVATV"  "DXXANTV"  "DXXGYTV"  "DXXANFM"  "DXXANLM" 
[103] "DXXANTOM" "DXXGYFM"  "DXXGYLM"  "DXXGYTOM" "DXXAGRAT" "DXXAPFAT"
[109] "DXXGPFAT" "DXXSATA"  "DXXSATM"  "DXXSATV"  "DXXTATA"  "DXXTATM" 
[115] "DXXTATV"  "DXXVFATA" "DXXVFATM" "DXXVFATV" "WHD010"   "WHD020"  
[121] "WHQ030"   "WHQ040"   "WHD050"   "WHQ060"   "WHQ070"   "WHD080A" 
[127] "WHD080B"  "WHD080C"  "WHD080D"  "WHD080E"  "WHD080F"  "WHD080G" 
[133] "WHD080H"  "WHD080I"  "WHD080J"  "WHD080K"  "WHD080M"  "WHD080N" 
[139] "WHD080O"  "WHD080P"  "WHD080Q"  "WHD080R"  "WHD080S"  "WHD080T" 
[145] "WHD080U"  "WHD080L"  "WHQ225"   "WHD110"   "WHD120"   "WHD130"  
[151] "WHD140"   "WHQ150"   "WHQ190"   "WHQ200"  
> 
> # save data for future work if needed
> write.csv(nhanes, "data/nhanes_all.csv")
> saveRDS(nhanes, 'data/nhanes_all.Rds')
> 
> # lowercase names
> names(nhanes) <- tolower(names(nhanes))
> 
> 
> # CLEAN VARIABLES FOR ANALYSIS ----------------------------------------------
> 
> #' CODEBOOK details
> #' riagendr: 1 = male, 2 = female
> #' ridageyr: age in years at screening
> #' ridreth3: 1 = mexican am, 2 = other hisp, 3 = nh white, 4 = nh black, 6 = nh asian, 7 = other
> #' bmxbmi: measured BMI in kg/m^2
> #' whd020: self reported weight in lbs
> #' whd010: self reported height in inches
> #' bpxsy1: systolic BP measured
> #' bpxdi1: diastolic BP measured
> #' bpq020: ever told high blood pressure 
> 
> # discretize age into buckets
> nhanes$age4 <- cut(nhanes$ridageyr, c(0, 20, 45, 65, Inf), include.lowest = TRUE, right = FALSE)
> 
> # collapse race/ethnicity
> nhanes$eth5 <- 
+     ifelse(nhanes$ridreth3 %in% c(1, 2), "Hispanic", 
+         ifelse(nhanes$ridreth3 == 3, "NH White", 
+             ifelse(nhanes$ridreth3 == 4, "NH Black", 
+                 ifelse(nhanes$ridreth3 == 6, "NH Asian", 
+                     ifelse(nhanes$ridreth3 == 7, "Other", NA)))))
> 
> # factor gender
> nhanes$gender <- factor(nhanes$riagendr, levels = c(1, 2), labels = c("Male", "Female"))
> 
> # measured BMI 
> nhanes$bmi_m <- nhanes$bmxbmi
> 
> # obesity category
> nhanes$ob <- 
+     ifelse(nhanes$bmxbmi <= 25, "Under/Normal", 
+         ifelse(nhanes$bmxbmi < 30, "Overweight", "Obese"))
> nhanes$ob <- factor(nhanes$ob, levels = c("Under/Normal", "Overweight", "Obese"))
> 
> # self reported weight (in lbs)
> nhanes$whd020 <- ifelse(nhanes$whd020 <= 500, nhanes$whd020, NA) # set don't know to missing
> 
> # self reported height (in inches)
> nhanes$whd010 <- ifelse(nhanes$whd010 <= 100, nhanes$whd010, NA) # set d.k. or refused to missing
> 
> # generate self reported BMI 
> nhanes$bmi_s <- (nhanes$whd020*0.453592) / (nhanes$whd010*0.0254)^2
> 
> # measured hypertension (just using first reading, for simplicity)
> # hypertension defined as SBP >= 130 OR DBP >=80 (https://www.heart.org/en/health-topics/high-blood-pressure/understanding-blood-pressure-readings)
> nhanes$htn_m <- 0
> nhanes$htn_m[(nhanes$bpxsy1 >= 130 | nhanes$bpxdi1 >= 80)] <- 1
> nhanes$htn_m <- ifelse((is.na(nhanes$bpxsy1) | is.na(nhanes$bpxdi1)), NA, nhanes$htn_m)
> 
> # self reported hypertension
> nhanes$htn_s <- 
+     ifelse(nhanes$bpq020 == 1, 1, 
+         ifelse(nhanes$bpq020 == 2, 0, NA))
> 
> # ANALYSIS ----------------------------------------------
> 
> # get summaries of measured/surrogate BMI and hypertension
> # bmi_error is defined as measured BMI - true BMI, since accoring to
> # classical measurement model, X = T + error => X - T = error
> 
> # distribution assumptions:
> # BMI is gamma
> # HTN is bernoulli 
> # BMI_error is normal
> 
> # measured BMI parameters, conditional on ob, eth5, gender, 
> # to be used across all 5 cases 
> bmi_m_params <- 
+     nhanes %>% 
+     drop_na(ob) %>% 
+     group_by(eth5, gender, ob) %>% 
+     summarize(shape.bmi_m = fitdistrplus::fitdist(as.vector(na.omit(bmi_m)), "gamma")[[1]][1], 
+               rate.bmi_m  = fitdistrplus::fitdist(as.vector(na.omit(bmi_m)), "gamma")[[1]][2]) 
`summarise()` has grouped output by 'eth5', 'gender'. You can override using the `.groups` argument.
> 
> write.csv(bmi_m_params, file = "out/generate_bmi_m_gamma.csv")
> saveRDS(bmi_m_params, file = "out/params/generate_bmi_m_gamma.Rds")
> 
> # model parameters for genderating HTN measured, also common across cases
> fit_y  <- glm(htn_m ~ bmi_m + eth5 + gender + ob, family = binomial(), data =  nhanes)
> write.csv(coefficients(fit_y), file = "out/generate_htn_m_model_coefs.csv")
> saveRDS(coefficients(fit_y), file = "out/params/generate_htn_m_model_coefs.Rds")
> 
> 
> # CASE 1: misclassification is random and does not depend on L ############
> 
> fit_xs    <- glm(bmi_s ~ bmi_m, family = gaussian(), data = nhanes)
> xs_params <- c(coefficients(fit_xs), sigma2 = summary(fit_xs)$dispersion)
> write.csv(xs_params, file = "out/c1_generate_bmi_s_coefs.csv")
> saveRDS(xs_params, file = "out/params/c1_generate_bmi_s_coefs.Rds")
> 
> fit_ys <- glm(htn_s ~ htn_m, family = binomial(), data = nhanes)
> ys_params <- coefficients(fit_ys)
> write.csv(ys_params, file = "out/c1_generate_htn_s_coefs.csv")
> saveRDS(ys_params, file = "out/params/c1_generate_htn_s_coefs.Rds")
> 
> 
> # CASE 2: misclassification depends on ethnicity alone ############
> 
> fit_xs    <- glm(bmi_s ~ bmi_m + eth5, family = gaussian(), data = nhanes)
> xs_params <- c(coefficients(fit_xs), sigma2 = summary(fit_xs)$dispersion)
> write.csv(xs_params, file = "out/c2_generate_bmi_s_coefs.csv")
> saveRDS(xs_params, file = "out/params/c2_generate_bmi_s_coefs.Rds")
> 
> fit_ys <- glm(htn_s ~ htn_m + eth5, family = binomial(), data = nhanes)
> ys_params <- coefficients(fit_ys)
> write.csv(ys_params, file = "out/c2_generate_htn_s_coefs.csv")
> saveRDS(ys_params, file = "out/params/c2_generate_htn_s_coefs.Rds")
> 
> 
> # CASE 3: misclassification depends on gender alone ############
> 
> fit_xs    <- glm(bmi_s ~ bmi_m + gender, family = gaussian(), data = nhanes)
> xs_params <- c(coefficients(fit_xs), sigma2 = summary(fit_xs)$dispersion)
> write.csv(xs_params, file = "out/c3_generate_bmi_s_coefs.csv")
> saveRDS(xs_params, file = "out/params/c3_generate_bmi_s_coefs.Rds")
> 
> fit_ys <- glm(htn_s ~ htn_m + gender, family = binomial(), data = nhanes)
> ys_params <- coefficients(fit_ys)
> write.csv(ys_params, file = "out/c3_generate_htn_s_coefs.csv")
> saveRDS(ys_params, file = "out/params/c3_generate_htn_s_coefs.Rds")
> 
> 
> # CASE 4: misclassification depends on obesity alone ############
> 
> fit_xs    <- glm(bmi_s ~ bmi_m + ob, family = gaussian(), data = nhanes)
> xs_params <- c(coefficients(fit_xs), sigma2 = summary(fit_xs)$dispersion)
> write.csv(xs_params, file = "out/c4_generate_bmi_s_coefs.csv")
> saveRDS(xs_params, file = "out/params/c4_generate_bmi_s_coefs.Rds")
> 
> fit_ys <- glm(htn_s ~ htn_m + ob, family = binomial(), data = nhanes)
> ys_params <- coefficients(fit_ys)
> write.csv(ys_params, file = "out/c4_generate_htn_s_coefs.csv")
> saveRDS(ys_params, file = "out/params/c4_generate_htn_s_coefs.Rds")
> 
> 
> # CASE 5: misclassification depends on obesity, ethnicity, and gender status ############
> 
> fit_xs    <- glm(bmi_s ~ bmi_m + eth5 + gender + ob, family = gaussian(), data = nhanes)
> xs_params <- c(coefficients(fit_xs), sigma2 = summary(fit_xs)$dispersion)
> write.csv(xs_params, file = "out/c5_generate_bmi_s_coefs.csv")
> saveRDS(xs_params, file = "out/params/c5_generate_bmi_s_coefs.Rds")
> 
> fit_ys <- glm(htn_s ~ htn_m + eth5 + gender + ob, family = binomial(), data = nhanes)
> ys_params <- coefficients(fit_ys)
> write.csv(ys_params, file = "out/c5_generate_htn_s_coefs.csv")
> saveRDS(ys_params, file = "out/params/c5_generate_htn_s_coefs.Rds")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> # For report, plot distributions of BMI by obesity and gender #####################
> 
> plot_dat <- 
+     nhanes %>% 
+     dplyr::select(bmi_s, bmi_m, ob, eth5, age4, htn_m, htn_s, gender) %>% 
+     drop_na()
> plot_dat$ob <- factor(plot_dat$ob, levels = c("Under/Normal", "Overweight", "Obese"), labels = c("Under/Normal", "Overweight", "Obese"))
> 
> plot <- 
+     ggplot(plot_dat) + 
+     geom_density(aes(x = bmi_m, fill = "Measured BMI"), color = NA, alpha = .5, adjust = 1.5) +
+     geom_density(aes(x = bmi_s, fill = "Self-Reported BMI"), color = NA, alpha = .5, adjust = 1.5) +
+     facet_wrap(gender ~ ob, scales = "free") +
+     scale_fill_jama() +
+     labs(title = "Measured vs. Self-Reported BMI, by Gender and Measured Obesity Status from NHANES",
+          x = "Body Mass Index (kg/m^2)", y = "Density") +
+     theme_bw() +
+     theme(legend.title = element_blank(), legend.position = "bottom",
+           plot.title = element_text(face = "bold")) 
> 
> # save BMI plot
> ggsave(plot = plot, filename = "out/fig/NHANES_bmi.pdf", device = "pdf", height = 6, width = 10, units = "in")
> 
> # For report, plot probability of hypertension by obesity and gender
> 
> tmp <- 
+     nhanes %>% 
+     group_by(ob, gender) %>% 
+     summarize(value = mean(htn_s, na.rm = TRUE)) %>% 
+     mutate(fill = "Self Reported HTN Prevalence") %>% 
+     drop_na()
`summarise()` has grouped output by 'ob'. You can override using the `.groups` argument.
> 
> plot_dat <- 
+     nhanes %>% 
+     group_by(ob, gender) %>% 
+     summarize(value = mean(htn_m, na.rm = TRUE)) %>% 
+     mutate(fill = "Measured HTN Prevalence") %>% 
+     drop_na()  %>% 
+     bind_rows(tmp)
`summarise()` has grouped output by 'ob'. You can override using the `.groups` argument.
> plot_dat$ob <- factor(plot_dat$ob, levels = c("Under/Normal", "Overweight", "Obese"), labels = c("Under/Normal", "Overweight", "Obese"))
> 
> plot <- 
+     ggplot(plot_dat) + 
+     geom_bar(aes(x = gender, y = value, fill = fill), position = "dodge2", stat = "identity",  color = NA) +
+     facet_wrap(. ~ ob ) +
+     scale_fill_jama() +
+     labs(title = "Measured vs. Self-Reported Hypertension Status, by Gender and Measured Obesity Status from NHANES",
+          x = "Gender", y = "Prevalence") +
+     theme_bw() +
+     theme(legend.title = element_blank(), legend.position = "bottom",
+           plot.title = element_text(face = "bold")) 
> 
> # save htn plot
> ggsave(plot = plot, filename = "out/fig/NHANES_htn.pdf", device = "pdf", height = 6, width = 10, units = "in")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.394   0.321   5.001 
