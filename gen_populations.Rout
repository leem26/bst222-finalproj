
R version 4.0.5 Patched (2021-05-28 r80505) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> Sys.time()
[1] "2021-12-03 19:24:54 EST"
> 
> ###############################################################################
> #
> # Project:     Generate simulated populations
> # Author:      Matt Lee
> # Date:        2021
> # Title:       Generated simulated populations for BST 222 Project
> # Description: Using misclassification parameters from NHANES (nhanes_analysis.R),
> #              set up simulation populations for each misclassification case and
> #              population size 
> #
> #              CASES:
> #               1) Random marginally
> #               2) Depends on ethnicity
> #               3) Depends on gender
> #               4) Depends on obesity
> #               5) Depends on ethnicity, gender, and obesity
> #              
> #              For each case, generate 100 datasets 
> #
> ###############################################################################
> 
> library(fastDummies)
> 
> # MUST SET WORKING DIRECTORY TO PROJECT ROOT
> # setwd("/Volumes/GoogleDrive-101809232694958266345/My Drive/Matt/School/PhD /2021-2022/BST 222/Project/bst222-finalproj")
> setwd("/Volumes/GoogleDrive/My Drive/Matt/School/PhD /2021-2022/BST 222/Project/bst222-finalproj/") # imact
> 
> 
> # METHODS FOR GENERATING ----------------------------------------------
> 
> # expit helper
> expit <- function(x) {
+     out = exp(x) / (1 + exp(x))
+     return(out)
+ }
> 
> # Generate baseline population of size n with even (approx) sizes of ethnicity, gender, and obesity
> #
> # @param n size of the population to generate framework for
> # @return data.frame with number of rows = n, with sampled ethnicity, obesity status, and gender
> sim_baseline <- function(n) {
+     dat          = data.frame(id = 1:n)
+     dat$eth5     = sample(x = c("Hispanic", "NH Asian", "NH Black", "NH White", "Other"), replace = TRUE, size = n) 
+     dat$gender   = sample(x = c("Male", "Female"), replace = TRUE, size = n)
+     dat$ob       = sample(x = c("Obese", "Overweight", "Under/Normal"), replace = TRUE, size = n) 
+ 
+     # factor 
+     dat$eth5     = factor(dat$eth5, levels = c("Hispanic", "NH Asian", "NH Black", "NH White", "Other"))
+     dat$gender   = factor(dat$gender, levels = c("Male", "Female"))
+     dat$ob       = factor(dat$ob, levels = c("Under/Normal", "Overweight", "Obese"))
+ 
+     dat = dummy_cols(dat, select_columns = c("eth5", "gender", "ob"), remove_first_dummy = TRUE)
+ 
+     return(dat)
+ }
> 
> # Simulate case 1 data
> # 
> # Case 1 corresponds to the case where individuals are misclassified completely
> # at random, i.e. completely independent of eth, ob, or gender
> #
> # @param popsize size of the population to generate case 1 misclassified data
> sim_case1 <- function(popsize) {
+     dat = sim_baseline(n = popsize)
+ 
+     # param files from NHANES
+     bmi_m_params = readRDS("out/params/generate_bmi_m_gamma.Rds") # bmi_m gamma fit parameters
+     htn_m_params = readRDS("out/params/generate_htn_m_model_coefs.Rds") # htn_m model params
+     bmi_s_params = readRDS("out/params/c1_generate_bmi_s_coefs.Rds") # bmi_s params
+     htn_s_params = readRDS("out/params/c1_generate_htn_s_coefs.Rds") # htn_s params
+     
+     
+     for (i in 1:nrow(dat)) {
+         # Draw measured BMI from gamma with appropriate hypers (same for all cases)
+         shape = bmi_m_params$shape.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"] & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         rate  = bmi_m_params$rate.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"]  & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         dat[i, "bmi_m"] = rgamma(1, shape = shape, rate = rate)
+ 
+         # Draw measured HTN from binomial with p specific to eth/gender/ob (same for all cases)
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_m_params
+         dat[i, "htn_m"] = rbinom(n = 1, size = 1, p = expit(p))
+ 
+         # Draw misclassified BMI value conditional on bmi_m
+         x = c(1, dat[i, "bmi_m"])
+         dat[i, "bmi_s"] = t(x) %*% bmi_s_params[1:(length(bmi_s_params)-1)] + rnorm(1, mean = 0, sd = sqrt(bmi_s_params[length(bmi_s_params)]))
+ 
+         # Draw misclassified HTN value conditional on htn_m
+         x = c(1, dat[i, "htn_m"])
+         p = t(x) %*% htn_s_params
+         dat[i, "htn_s"] = rbinom(n = 1, size = 1, p = expit(p))
+     }
+     return(dat)
+ }
> 
> # Simulate case 2 data
> # 
> # Case 2 corresponds to the case where individuals are misclassified 
> # by ethnicity
> #
> # @param popsize size of the population to generate case 2 misclassified data
> sim_case2 <- function(popsize) {
+     dat = sim_baseline(n = popsize)
+     
+     # param files from NHANES
+     bmi_m_params = readRDS("out/params/generate_bmi_m_gamma.Rds") # bmi_m gamma fit parameters
+     htn_m_params = readRDS("out/params/generate_htn_m_model_coefs.Rds") # htn_m model params
+     bmi_s_params = readRDS("out/params/c2_generate_bmi_s_coefs.Rds") # bmi_s params
+     htn_s_params = readRDS("out/params/c2_generate_htn_s_coefs.Rds") # htn_s params
+     
+     for (i in 1:nrow(dat)) {
+         # Draw measured BMI from gamma with appropriate hypers (same for all cases)
+         shape = bmi_m_params$shape.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"] & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         rate  = bmi_m_params$rate.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"]  & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         dat[i, "bmi_m"] = rgamma(1, shape = shape, rate = rate)
+ 
+         # Draw measured HTN from binomial with p specific to eth/gender/ob (same for all cases)
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_m_params
+         dat[i, "htn_m"] = rbinom(n = 1, size = 1, p = expit(p))
+         
+         # Draw misclassified BMI value conditional on bmi_m and eth
+         x = c(1, dat[i, "bmi_m"], dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"])
+         dat[i, "bmi_s"] = t(x) %*% bmi_s_params[1:(length(bmi_s_params)-1)] + rnorm(1, mean = 0, sd = sqrt(bmi_s_params[length(bmi_s_params)]))
+ 
+         # Draw misclassified HTN value conditional on htn_m
+         x = c(1, dat[i, "htn_m"], dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"])
+         p = t(x) %*% htn_s_params
+         dat[i, "htn_s"] = rbinom(n = 1, size = 1, p = expit(p))
+     }
+     return(dat)
+ }
> 
> 
> # Simulate case 3 data
> # 
> # Case 3 corresponds to the case where individuals are misclassified 
> # by gender
> #
> # @param popsize size of the population to generate case 3 misclassified data
> sim_case3 <- function(popsize) {
+     dat = sim_baseline(n = popsize)
+     
+     # param files from NHANES
+     bmi_m_params = readRDS("out/params/generate_bmi_m_gamma.Rds") # bmi_m gamma fit parameters
+     htn_m_params = readRDS("out/params/generate_htn_m_model_coefs.Rds") # htn_m model params
+     bmi_s_params = readRDS("out/params/c3_generate_bmi_s_coefs.Rds") # bmi_s params
+     htn_s_params = readRDS("out/params/c3_generate_htn_s_coefs.Rds") # htn_s params
+     
+     for (i in 1:nrow(dat)) {
+         # Draw measured BMI from gamma with appropriate hypers (same for all cases)
+         shape = bmi_m_params$shape.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"] & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         rate  = bmi_m_params$rate.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"]  & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         dat[i, "bmi_m"] = rgamma(1, shape = shape, rate = rate)
+ 
+         # Draw measured HTN from binomial with p specific to eth/gender/ob (same for all cases)
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_m_params
+         dat[i, "htn_m"] = rbinom(n = 1, size = 1, p = expit(p))
+         
+         # Draw misclassified BMI value conditional on bmi_m and gender
+         x = c(1, dat[i, "bmi_m"], dat[i, "gender_Female"])
+         dat[i, "bmi_s"] = t(x) %*% bmi_s_params[1:(length(bmi_s_params)-1)] + rnorm(1, mean = 0, sd = sqrt(bmi_s_params[length(bmi_s_params)]))
+ 
+         # Draw misclassified HTN value conditional on htn_m
+         x = c(1, dat[i, "htn_m"], dat[i, "gender_Female"])
+         p = t(x) %*% htn_s_params
+         dat[i, "htn_s"] = rbinom(n = 1, size = 1, p = expit(p))
+     }
+     return(dat)
+ }
> 
> # Simulate case 4 data
> # 
> # Case 4 corresponds to the case where individuals are misclassified 
> # by obesity category
> #
> # @param popsize size of the population to generate case 3 misclassified data
> sim_case4 <- function(popsize) {
+     dat = sim_baseline(n = popsize)
+     
+     # param files from NHANES
+     bmi_m_params = readRDS("out/params/generate_bmi_m_gamma.Rds") # bmi_m gamma fit parameters
+     htn_m_params = readRDS("out/params/generate_htn_m_model_coefs.Rds") # htn_m model params
+     bmi_s_params = readRDS("out/params/c4_generate_bmi_s_coefs.Rds") # bmi_s params
+     htn_s_params = readRDS("out/params/c4_generate_htn_s_coefs.Rds") # htn_s params
+     
+     for (i in 1:nrow(dat)) {
+         # Draw measured BMI from gamma with appropriate hypers (same for all cases)
+         shape = bmi_m_params$shape.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"] & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         rate  = bmi_m_params$rate.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"]  & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         dat[i, "bmi_m"] = rgamma(1, shape = shape, rate = rate)
+ 
+         # Draw measured HTN from binomial with p specific to eth/gender/ob (same for all cases)
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_m_params
+         dat[i, "htn_m"] = rbinom(n = 1, size = 1, p = expit(p))
+         
+         # Draw misclassified BMI value conditional on bmi_m and obesity
+         x = c(1, dat[i, "bmi_m"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         dat[i, "bmi_s"] = t(x) %*% bmi_s_params[1:(length(bmi_s_params)-1)] + rnorm(1, mean = 0, sd = sqrt(bmi_s_params[length(bmi_s_params)]))
+ 
+         # Draw misclassified HTN value conditional on htn_m and obesity
+         x = c(1, dat[i, "htn_m"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_s_params
+         dat[i, "htn_s"] = rbinom(n = 1, size = 1, p = expit(p))
+     }
+     return(dat)
+ }
> 
> # Simulate case 5 data
> # 
> # Case 5 corresponds to the case where individuals are misclassified 
> # by gender, eth, and obesity category
> #
> # @param popsize size of the population to generate case 3 misclassified data
> sim_case5 <- function(popsize) {
+     dat = sim_baseline(n = popsize)
+     
+     # param files from NHANES
+     bmi_m_params = readRDS("out/params/generate_bmi_m_gamma.Rds") # bmi_m gamma fit parameters
+     htn_m_params = readRDS("out/params/generate_htn_m_model_coefs.Rds") # htn_m model params
+     bmi_s_params = readRDS("out/params/c5_generate_bmi_s_coefs.Rds") # bmi_s params
+     htn_s_params = readRDS("out/params/c5_generate_htn_s_coefs.Rds") # htn_s params
+     
+     for (i in 1:nrow(dat)) {
+         # Draw measured BMI from gamma with appropriate hypers (same for all cases)
+         shape = bmi_m_params$shape.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"] & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         rate  = bmi_m_params$rate.bmi_m[bmi_m_params$eth5 == dat[i, "eth5"]  & bmi_m_params$gender == dat[i, "gender"] & bmi_m_params$ob == dat[i, "ob"]]
+         dat[i, "bmi_m"] = rgamma(1, shape = shape, rate = rate)
+ 
+         # Draw measured HTN from binomial with p specific to eth/gender/ob (same for all cases)
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_m_params
+         dat[i, "htn_m"] = rbinom(n = 1, size = 1, p = expit(p))
+         
+         # Draw misclassified BMI value conditional on bmi_m and all L
+         x = c(1, dat[i, "bmi_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         dat[i, "bmi_s"] = t(x) %*% bmi_s_params[1:(length(bmi_s_params)-1)] + rnorm(1, mean = 0, sd = sqrt(bmi_s_params[length(bmi_s_params)]))
+ 
+         # Draw misclassified HTN value conditional on htn_m and all L
+         x = c(1, dat[i, "htn_m"], 
+               dat[i, "eth5_NH Asian"], dat[i, "eth5_NH Black"], dat[i, "eth5_NH White"], dat[i, "eth5_Other"], 
+               dat[i, "gender_Female"], dat[i, "ob_Overweight"], dat[i, "ob_Obese"])
+         p = t(x) %*% htn_s_params
+         dat[i, "htn_s"] = rbinom(n = 1, size = 1, p = expit(p))
+     }
+     return(dat)
+ }
> 
> 
> # GENERATE POPULATIONS ----------------------------------------------
> 
> npops <- 100
> sizes <- c(100, 500, 1000, 5000, 10000)
> 
> j <- 0
> while (j < npops) {
+     for (i in sizes) {
+         fn1 = paste0("data/simdata/case1/n", i, "/pop_", j, ".csv")
+         case1 = sim_case1(i); write.csv(x = case1, file = fn1)
+ 
+         fn2 = paste0("data/simdata/case2/n", i, "/pop_", j, ".csv")
+         case2 = sim_case2(i); write.csv(x = case2, file = fn2)
+ 
+         fn3 = paste0("data/simdata/case3/n", i, "/pop_", j, ".csv")
+         case3 = sim_case3(i); write.csv(x = case3, file = fn3)
+ 
+         fn4 = paste0("data/simdata/case4/n", i, "/pop_", j, ".csv")
+         case4 = sim_case4(i); write.csv(x = case4, file = fn4)
+ 
+         fn5 = paste0("data/simdata/case5/n", i, "/pop_", j, ".csv")
+         case5 = sim_case5(i); write.csv(x = case5, file = fn5)
+     }
+     # increment j
+     j <- j + 1
+ }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
    user   system  elapsed 
4780.822  215.699 5143.182 
